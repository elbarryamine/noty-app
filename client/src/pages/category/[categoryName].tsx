import React, { useEffect, useState } from 'react';
import dynamic from 'next/dynamic';
import { Box, Container, Flex, Stack } from '@chakra-ui/layout';
import { trpc } from '@shared/utils/trpc/trpc';
import { SlideFade, useDisclosure } from '@chakra-ui/react';
import useBreakpoints from '@shared/hooks/useBreakpoints';
import Head from 'next/head';
import Preloader from '@components/layouts/Preloader';
import { useRouter } from 'next/router';
import { CategoryGetResponse } from '@shared/utils/trpc/types';

const NewNote = dynamic(() => import('@components/layouts/notes/NewNotePopup'));
const HeaderNavigation = dynamic(
  () => import('@components/layouts/HeaderNavigation'),
);
const NoteCategorySelect = dynamic(
  () => import('@components/layouts/notes/NoteCategorySelect'),
);
const CategoryNotesList = dynamic(
  () => import('@components/layouts/notes/NotesList/CategoryNotesList'),
);
const FavoriteNotesList = dynamic(
  () => import('@components/layouts/notes/NotesList/FavoriteNotesList'),
);
const TrashNotesList = dynamic(
  () => import('@components/layouts/notes/NotesList/TrashNotesList'),
);

export default function Category() {
  const [selected, setSelected] = useState<CategoryGetResponse[number] | null>(
    null,
  );

  const router = useRouter();
  const [isNotFound, setIsNotFound] = useState(false);
  const [, isMd] = useBreakpoints();
  const { isOpen } = useDisclosure({ defaultIsOpen: true });
  const category = trpc.category.get.useQuery();

  useEffect(() => {
    if (typeof router?.query?.categoryName !== 'string') return;
    if (['trash', 'favorite'].includes(router.query.categoryName ?? '')) {
      return setSelected(null);
    }
    if (category.isLoading) return;
    const categ = (category.data ?? []).find(
      (el) =>
        el.name.toLowerCase() ===
        (router.query.categoryName as string).toLowerCase(),
    );
    if (categ) {
      setSelected(categ);
    } else {
      setIsNotFound(true);
    }
  }, [router?.query?.categoryName, category.data]);

  if (isNotFound) return <>Not found</>;
  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Box as="main" h="100vh">
        <Container maxW="container.lg" px="10px" h="100%">
          <Stack spacing={10} h="100%">
            <HeaderNavigation />
            <>
              {category.isLoading ? (
                <Preloader />
              ) : (
                <>
                  <Flex
                    justify="space-between"
                    align="center"
                    flexDir={isMd ? 'column' : 'row'}
                    flexWrap="wrap"
                    zIndex={2}
                  >
                    <NoteCategorySelect
                      categories={category.data ?? []}
                      selected={selected}
                      onChange={(val) =>
                        router.push(`/category/${val.name.toLowerCase()}`)
                      }
                      isFavorite={router.query.categoryName === 'favorite'}
                      isTrash={router.query.categoryName === 'trash'}
                      onFavoriteSelect={() => router.push('/category/favorite')}
                      onTrashSelect={() => router.push('/category/trash')}
                    />
                    {selected && (
                      <SlideFade delay={0.1} offsetY="-5px" in={isOpen}>
                        <NewNote categoryId={selected.id} />
                      </SlideFade>
                    )}
                  </Flex>
                  {selected && (
                    <SlideFade delay={0.1} offsetY="-5px" in={isOpen}>
                      <CategoryNotesList categoryId={selected.id} />
                    </SlideFade>
                  )}
                  {router.query.categoryName === 'trash' && (
                    <SlideFade delay={0.1} offsetY="-5px" in={isOpen}>
                      <TrashNotesList />
                    </SlideFade>
                  )}
                  {router.query.categoryName === 'favorite' && (
                    <SlideFade delay={0.1} offsetY="-5px" in={isOpen}>
                      <FavoriteNotesList />
                    </SlideFade>
                  )}
                </>
              )}
            </>
          </Stack>
        </Container>
      </Box>
    </>
  );
}
